version: '3'

services:
  postgres:
    image: postgis/postgis:15-3.4
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - ./docker/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ./lib/time_machine/sql/:/scripts
      - ./projects:/projects
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  script:
    profiles:
      - tools
    build:
      context: .
      dockerfile: script.Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres@postgres:5432/postgres
      - PUBLIC_URL=${PUBLIC_URL}
      - SENTRY_DSN_TOOLS=${SENTRY_DSN_TOOLS}
    volumes:
      - ./lib/time_machine/sql:/sql
      - ./projects:/projects
      - ./projects:/srv/app/projects
    depends_on:
      - postgres

  api:
    build:
      context: .
    environment:
      - RAILS_ENV=${RAILS_ENV:-production}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE:-Toe8eihai5ieShai}
      - OSM_OAUTH2_ID=${OSM_OAUTH2_ID}
      - OSM_OAUTH2_SECRET=${OSM_OAUTH2_SECRET}
      - OSM_OAUTH2_REDIRECT=${OSM_OAUTH2_REDIRECT}
      - DATABASE_URL=postgresql://postgres@postgres:5432/postgres
      - SENTRY_DSN_API=${SENTRY_DSN_API}
    volumes:
      - ./lib/time_machine/sql:/sql
      - ./cache:/cache
      - ./projects:/projects
      - ./projects:/srv/app/projects
    depends_on:
      - postgres
    command: bundle exec rails server --binding=0.0.0.0 --port 9000
    restart: unless-stopped

  frontend:
    build:
      context: frontend
      args:
        - API=${PUBLIC_URL}/api/0.1
        - NUXT_PUBLIC_SENTRY_DSN=${SENTRY_DSN_FRONTEND}
        - NUXT_PUBLIC_SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT:-production}
    depends_on:
      - api
    restart: unless-stopped

  reverse-proxy:
    image: nginx
    ports:
      - ${NGINX_PORT:-8000}:80
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./projects:/projects
    depends_on:
      - api
      - frontend
    restart: unless-stopped

volumes:
  pgdata:
